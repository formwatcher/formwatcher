// Generated by CoffeeScript 1.3.3
(function() {
  var $, Formwatcher, Watcher, inputSelector,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = ender;

  $.ender({
    fwData: function(name, value) {
      var formwatcherAttributes;
      if (this.data("_formwatcher") == null) {
        this.data("_formwatcher", {});
      }
      if (name == null) {
        return this;
      }
      formwatcherAttributes = this.data("_formwatcher");
      if (value != null) {
        formwatcherAttributes[name] = value;
        this.data("_formwatcher", formwatcherAttributes);
        return this;
      } else {
        return formwatcherAttributes[name];
      }
    }
  }, true);

  inputSelector = "input, textarea, select, button";

  Formwatcher = {
    version: "2.1.10-dev",
    debugging: false,
    debug: function() {
      if (this.debugging && ((typeof console !== "undefined" && console !== null ? console.debug : void 0) != null)) {
        return console.debug.apply(console, arguments);
      }
    },
    getErrorsElement: function(elements, createIfNotFound) {
      var errors, input;
      input = elements.input;
      if (input.attr("name")) {
        errors = $("#" + (input.attr('name')) + "-errors");
      }
      if (!((errors != null ? errors.length : void 0) || !input.attr("id"))) {
        errors = $("#" + (input.attr('id')) + "-errors");
      }
      if (!errors || !errors.length) {
        errors = $.create("<small />");
        if (input.attr("name")) {
          errors.attr("id", input.attr("name") + "-errors");
        }
        errors.insertAfter(input);
      }
      return errors.hide().addClass("errors").addClass("fw-errors");
    },
    deepExtend: function() {
      var extenders, key, object, other, val, _i, _len;
      object = arguments[0], extenders = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (object == null) {
        return {};
      }
      for (_i = 0, _len = extenders.length; _i < _len; _i++) {
        other = extenders[_i];
        for (key in other) {
          if (!__hasProp.call(other, key)) continue;
          val = other[key];
          if (!((object[key] != null) && typeof val === "object")) {
            object[key] = val;
          } else {
            object[key] = this.deepExtend(object[key], val);
          }
        }
      }
      return object;
    },
    getLabel: function(elements, automatchLabel) {
      var input, label, parent;
      input = elements.input;
      if (input.attr("id")) {
        label = $("label[for=" + input.attr("id") + "]");
        if (!label.length) {
          label = undefined;
        }
      }
      if (!label && automatchLabel) {
        parent = input.parent();
        if (parent.get(0).nodeName === "LABEL") {
          label = $("span", parent).first();
          if (label.length === 0) {
            label = void 0;
          }
        } else {
          label = input.previous();
          if (!label.length || label.get(0).nodeName !== "LABEL" || (label.attr("for") != null)) {
            label = void 0;
          }
        }
      }
      return label;
    },
    changed: function(elements, watcher) {
      var input;
      input = elements.input;
      if (!input.fwData("forceValidationOnChange") && (input.attr("type") === "checkbox" && input.fwData("previouslyChecked") === !!input[0].checked) || (input.fwData("previousValue") === input.val())) {
        return;
      }
      input.fwData("forceValidationOnChange", false);
      this.setPreviousValueToCurrentValue(elements);
      if ((input.attr("type") === "checkbox") && (input.fwData("initialyChecked") !== !!input[0].checked) || (input.attr("type") !== "checkbox") && (input.fwData("initialValue") !== input.val())) {
        Formwatcher.setChanged(elements, watcher);
      } else {
        Formwatcher.unsetChanged(elements, watcher);
      }
      if (watcher.options.validate) {
        return watcher.validateElements(elements);
      }
    },
    setChanged: function(elements, watcher) {
      var element, i, input;
      input = elements.input;
      if (input.fwData("changed")) {
        return;
      }
      for (i in elements) {
        if (!__hasProp.call(elements, i)) continue;
        element = elements[i];
        element.addClass("changed");
      }
      input.fwData("changed", true);
      if (!watcher.options.submitUnchanged) {
        Formwatcher.restoreName(elements);
      }
      if (watcher.options.submitOnChange && watcher.options.ajax) {
        return watcher.submitForm();
      }
    },
    unsetChanged: function(elements, watcher) {
      var element, i, input;
      input = elements.input;
      if (!input.fwData("changed")) {
        return;
      }
      for (i in elements) {
        if (!__hasProp.call(elements, i)) continue;
        element = elements[i];
        element.removeClass("changed");
      }
      input.fwData("changed", false);
      if (!watcher.options.submitUnchanged) {
        return Formwatcher.removeName(elements);
      }
    },
    storeInitialValue: function(elements) {
      var input;
      input = elements.input;
      if (input.attr("type") === "checkbox") {
        input.fwData("initialyChecked", !!input[0].checked);
      } else {
        input.fwData("initialValue", input.val());
      }
      return this.setPreviousValueToInitialValue(elements);
    },
    restoreInitialValue: function(elements) {
      var input;
      input = elements.input;
      if (input.attr("type") === "checkbox") {
        input.attr("checked", input.fwData("initialyChecked"));
      } else {
        input.val(input.fwData("initialValue"));
      }
      return this.setPreviousValueToInitialValue(elements);
    },
    setPreviousValueToInitialValue: function(elements) {
      var input;
      input = elements.input;
      if (input.attr("type") === "checkbox") {
        return input.fwData("previouslyChecked", input.fwData("initialyChecked"));
      } else {
        return input.fwData("previousValue", input.fwData("initialValue"));
      }
    },
    setPreviousValueToCurrentValue: function(elements) {
      var input;
      input = elements.input;
      if (input.attr("type") === "checkbox") {
        return input.fwData("previouslyChecked", !!input[0].checked);
      } else {
        return input.fwData("previousValue", input.val());
      }
    },
    removeName: function(elements) {
      var input;
      input = elements.input;
      if (input.attr("type") === "checkbox") {
        return;
      }
      if (!input.fwData("name")) {
        input.fwData("name", input.attr("name") || "");
      }
      return input.attr("name", "");
    },
    restoreName: function(elements) {
      var input;
      input = elements.input;
      if (input.attr("type") === "checkbox") {
        return;
      }
      return input.attr("name", input.fwData("name"));
    },
    decorators: [],
    decorate: function(watcher, input) {
      var dec, decorator, _i, _len, _ref;
      decorator = null;
      _ref = watcher.decorators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dec = _ref[_i];
        if (dec.accepts(input)) {
          decorator = dec;
          break;
        }
      }
      if (decorator) {
        Formwatcher.debug("Decorator \"" + decorator.name + "\" found for input field \"" + input.attr("name") + "\".");
        return decorator.decorate(input);
      } else {
        return {
          input: input
        };
      }
    },
    validators: [],
    currentWatcherId: 0,
    watchers: [],
    add: function(watcher) {
      return this.watchers[watcher.id] = watcher;
    },
    get: function(id) {
      return this.watchers[id];
    },
    getAll: function() {
      return this.watchers;
    },
    scanDocument: function() {
      var formId, handleForm, _results,
        _this = this;
      handleForm = function(form) {
        var domOptions, formId, options;
        form = $(form);
        if (form.fwData("watcher")) {
          return;
        }
        formId = form.attr("id");
        options = (formId != null) && (Formwatcher.options[formId] != null) ? Formwatcher.options[formId] : {};
        domOptions = form.data("fw");
        if (domOptions) {
          options = _this.deepExtend(options, JSON.parse(domOptions));
        }
        return new Watcher(form, options);
      };
      $("form[data-fw]").each(function(form) {
        return handleForm(form);
      });
      _results = [];
      for (formId in Formwatcher.options) {
        _results.push(handleForm($("#" + formId)));
      }
      return _results;
    },
    watch: function(form, options) {
      return $.domReady(function() {
        return new Watcher(form, options);
      });
    }
  };

  Formwatcher._ElementWatcher = (function() {

    _ElementWatcher.prototype.name = "No name";

    _ElementWatcher.prototype.description = "No description";

    _ElementWatcher.prototype.nodeNames = null;

    _ElementWatcher.prototype.classNames = [];

    _ElementWatcher.prototype.defaultOptions = {};

    _ElementWatcher.prototype.options = null;

    function _ElementWatcher(watcher) {
      var _ref;
      this.watcher = watcher;
      this.options = Formwatcher.deepExtend({}, this.defaultOptions, (_ref = watcher.options[this.name]) != null ? _ref : {});
    }

    _ElementWatcher.prototype.accepts = function(input) {
      var className, correctClassNames, correctNodeName, inputNodeName, nodeName, _i, _j, _len, _len1, _ref, _ref1;
      if ((this.watcher.options[this.name] != null) && this.watcher.options[this.name] === false) {
        return false;
      }
      correctNodeName = false;
      inputNodeName = input.get(0).nodeName;
      _ref = this.nodeNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nodeName = _ref[_i];
        if (inputNodeName === nodeName) {
          correctNodeName = true;
          break;
        }
      }
      if (!correctNodeName) {
        return false;
      }
      correctClassNames = true;
      _ref1 = this.classNames;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        className = _ref1[_j];
        if (!input.hasClass(className)) {
          correctClassNames = false;
          break;
        }
      }
      return correctClassNames;
    };

    return _ElementWatcher;

  })();

  Formwatcher.Decorator = (function(_super) {

    __extends(Decorator, _super);

    function Decorator() {
      return Decorator.__super__.constructor.apply(this, arguments);
    }

    Decorator.prototype.decorate = function(watcher, input) {
      return {
        input: input
      };
    };

    return Decorator;

  })(Formwatcher._ElementWatcher);

  Formwatcher.Validator = (function(_super) {

    __extends(Validator, _super);

    function Validator() {
      return Validator.__super__.constructor.apply(this, arguments);
    }

    Validator.prototype.nodeNames = ["INPUT", "TEXTAREA", "SELECT"];

    Validator.prototype.validate = function(sanitizedValue, input) {
      return true;
    };

    Validator.prototype.sanitize = function(value) {
      return value;
    };

    return Validator;

  })(Formwatcher._ElementWatcher);

  Formwatcher.defaultOptions = {
    ajax: false,
    ajaxMethod: null,
    validate: true,
    submitOnChange: false,
    submitUnchanged: true,
    submitFormIfAllUnchanged: false,
    resetFormAfterSubmit: false,
    automatchLabel: true,
    responseCheck: function(data) {
      return !data;
    },
    onSubmit: function() {},
    onSuccess: function(data) {},
    onError: function(data) {
      return alert(data);
    },
    onComplete: function(data) {}
  };

  Formwatcher.options = {};

  Watcher = (function() {

    function Watcher(form, options) {
      var Decorator, Validator, hiddenSubmitButtonElement, submitButtons, _i, _j, _len, _len1, _ref, _ref1, _ref2,
        _this = this;
      this.form = typeof form === "string" ? $("#" + form) : $(form);
      if (this.form.length < 1) {
        throw "Form element not found.";
      } else if (this.form.length > 1) {
        throw "More than one form was found.";
      } else if (this.form.get(0).nodeName !== "FORM") {
        throw "The element was not a form.";
      }
      this.allElements = [];
      this.id = Formwatcher.currentWatcherId++;
      Formwatcher.add(this);
      this.observers = {};
      this.form.fwData("watcher", this);
      this.form.fwData("originalAction", this.form.attr("action") || "").attr("action", "javascript:undefined;");
      this.options = Formwatcher.deepExtend({}, Formwatcher.defaultOptions, options || {});
      this.decorators = [];
      this.validators = [];
      _ref = Formwatcher.decorators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        Decorator = _ref[_i];
        this.decorators.push(new Decorator(this));
      }
      _ref1 = Formwatcher.validators;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        Validator = _ref1[_j];
        this.validators.push(new Validator(this));
      }
      if (this.options.ajaxMethod === null) {
        this.options.ajaxMethod = (_ref2 = this.form.attr("method")) != null ? _ref2.toLowerCase() : void 0;
      }
      switch (this.options.ajaxMethod) {
        case "post":
        case "put":
        case "delete":
          break;
        default:
          this.options.ajaxMethod = "get";
      }
      this.observe("submit", this.options.onSubmit);
      this.observe("success", this.options.onSuccess);
      this.observe("error", this.options.onError);
      this.observe("complete", this.options.onComplete);
      $(inputSelector, this.form).each(function(input) {
        var element, elements, errorsElement, i, label, onchangeFunction, validateElementsFunction, validator, _k, _len2, _ref3, _results;
        input = $(input);
        if (!input.fwData("initialized")) {
          if (input.attr("type") === "hidden") {
            return input.fwData("forceSubmission", true);
          } else {
            elements = Formwatcher.decorate(_this, input);
            if (elements.input.get() !== input.get()) {
              elements.input.attr("class", input.attr("class"));
              input = elements.input;
            }
            if (!elements.label) {
              label = Formwatcher.getLabel(elements, _this.options.automatchLabel);
              if (label) {
                elements.label = label;
              }
            }
            if (!elements.errors) {
              errorsElement = Formwatcher.getErrorsElement(elements, true);
              elements.errors = errorsElement;
            }
            _this.allElements.push(elements);
            input.fwData("validators", []);
            _ref3 = _this.validators;
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              validator = _ref3[_k];
              if (validator.accepts(input, _this)) {
                Formwatcher.debug("Validator \"" + validator.name + "\" found for input field \"" + input.attr("name") + "\".");
                input.fwData("validators").push(validator);
              }
            }
            Formwatcher.storeInitialValue(elements);
            if (input.val() === null || !input.val()) {
              for (i in elements) {
                element = elements[i];
                element.addClass("empty");
              }
            }
            if (!_this.options.submitUnchanged) {
              Formwatcher.removeName(elements);
            }
            onchangeFunction = function() {
              return Formwatcher.changed(elements, _this);
            };
            validateElementsFunction = function() {
              return _this.validateElements(elements, true);
            };
            _results = [];
            for (i in elements) {
              element = elements[i];
              _results.push((function(element) {
                var _this = this;
                element.on("focus", function() {
                  return element.addClass("focus");
                });
                element.on("blur", function() {
                  return element.removeClass("focus");
                });
                element.on("change", onchangeFunction);
                element.on("blur", onchangeFunction);
                return element.on("keyup", validateElementsFunction);
              })(element));
            }
            return _results;
          }
        }
      });
      submitButtons = $("input[type=submit], button[type=''], button[type='submit'], button:not([type])", this.form);
      hiddenSubmitButtonElement = $.create('<input type="hidden" name="" value="" />');
      this.form.append(hiddenSubmitButtonElement);
      submitButtons.each(function(element) {
        element = $(element);
        return element.click(function(e) {
          var elementValue, tmpElementText, _ref3, _ref4;
          if (element[0].tagName === "BUTTON") {
            tmpElementText = element.text();
            element.text("");
            elementValue = (_ref3 = element.val()) != null ? _ref3 : "";
            element.text(tmpElementText);
          } else {
            elementValue = (_ref4 = element.val()) != null ? _ref4 : "";
          }
          hiddenSubmitButtonElement.attr("name", element.attr("name") || "").val(elementValue);
          _this.submitForm();
          return e.stopPropagation();
        });
      });
    }

    Watcher.prototype.callObservers = function() {
      var args, eventName, observer, _i, _len, _ref, _results;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.observers[eventName];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observer = _ref[_i];
        _results.push(observer.apply(this, args));
      }
      return _results;
    };

    Watcher.prototype.observe = function(eventName, func) {
      if (this.observers[eventName] === undefined) {
        this.observers[eventName] = [];
      }
      this.observers[eventName].push(func);
      return this;
    };

    Watcher.prototype.stopObserving = function(eventName, func) {
      var observer;
      this.observers[eventName] = (function() {
        var _i, _len, _ref, _results;
        _ref = this.observers[eventName];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          observer = _ref[_i];
          if (observer !== func) {
            _results.push(observer);
          }
        }
        return _results;
      }).call(this);
      return this;
    };

    Watcher.prototype.enableForm = function() {
      return $(inputSelector, this.form).removeAttr("disabled");
    };

    Watcher.prototype.disableForm = function() {
      return $(inputSelector, this.form).attr("disabled", "disabled");
    };

    Watcher.prototype.submitForm = function(e) {
      var _this = this;
      if (!this.options.validate || this.validateForm()) {
        this.callObservers("submit");
        this.form.addClass("submitting");
        if (this.options.ajax) {
          this.disableForm();
          return this.submitAjax();
        } else {
          this.form.attr("action", this.form.fwData("originalAction"));
          setTimeout(function() {
            _this.form.submit();
            return _this.disableForm();
          }, 1);
          return false;
        }
      }
    };

    Watcher.prototype.validateForm = function() {
      var elements, validated, _i, _len, _ref;
      validated = true;
      _ref = this.allElements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elements = _ref[_i];
        if (!this.validateElements(elements)) {
          validated = false;
        }
      }
      return validated;
    };

    Watcher.prototype.validateElements = function(elements, inlineValidating) {
      var element, i, input, sanitizedValue, validated, validationOutput, validator, _i, _j, _len, _len1, _ref, _ref1;
      input = elements.input;
      validated = true;
      if (input.fwData("validators").length) {
        if (!inlineValidating || !input.fwData("lastValidatedValue") || input.fwData("lastValidatedValue") !== input.val()) {
          input.fwData("lastValidatedValue", input.val());
          Formwatcher.debug("Validating input " + input.attr("name"));
          input.fwData("validationErrors", []);
          _ref = input.fwData("validators");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            validator = _ref[_i];
            if (input.val() === "" && validator.name !== "Required") {
              Formwatcher.debug("Validating " + validator.name + ". Field was empty so continuing.");
              continue;
            }
            Formwatcher.debug("Validating " + validator.name);
            validationOutput = validator.validate(validator.sanitize(input.val()), input);
            if (validationOutput !== true) {
              validated = false;
              input.fwData("validationErrors").push(validationOutput);
              break;
            }
          }
          if (validated) {
            elements.errors.html("").hide();
            for (i in elements) {
              if (!__hasProp.call(elements, i)) continue;
              element = elements[i];
              element.addClass("validated");
              element.removeClass("error");
            }
            if (inlineValidating) {
              elements.input.fwData("forceValidationOnChange", true);
            }
          } else {
            for (i in elements) {
              if (!__hasProp.call(elements, i)) continue;
              element = elements[i];
              element.removeClass("validated");
            }
            if (!inlineValidating) {
              elements.errors.html(input.fwData("validationErrors").join("<br />")).show();
              for (i in elements) {
                if (!__hasProp.call(elements, i)) continue;
                element = elements[i];
                element.addClass("error");
              }
            }
          }
        }
        if (!inlineValidating && validated) {
          sanitizedValue = input.fwData("lastValidatedValue");
          _ref1 = input.fwData("validators");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            validator = _ref1[_j];
            sanitizedValue = validator.sanitize(sanitizedValue);
          }
          input.val(sanitizedValue);
        }
      } else {
        for (i in elements) {
          if (!__hasProp.call(elements, i)) continue;
          element = elements[i];
          element.addClass("validated");
        }
      }
      return validated;
    };

    Watcher.prototype.submitAjax = function() {
      var fieldCount, fields, i,
        _this = this;
      Formwatcher.debug("Submitting form via AJAX.");
      fields = {};
      fieldCount = 0;
      i = 0;
      $(inputSelector, this.form).each(function(input, i) {
        var attributeName, _ref;
        input = $(input);
        if (input[0].nodeName === "BUTTON" || (input[0].nodeName === "INPUT" && (input.attr("type").toLowerCase() === "submit" || input.attr("type").toLowerCase() === "button"))) {
          return;
        }
        if (input.fwData("forceSubmission") || (input.attr("type") && input.attr("type").toLowerCase() === "checkbox") || input.fwData('changed') || _this.options.submitUnchanged) {
          if (input.attr("type") !== "checkbox" || input.get(0).checked) {
            fieldCount++;
            attributeName = (_ref = input.attr("name")) != null ? _ref : "unnamedInput_" + i;
            return fields[attributeName] = input.val();
          }
        }
      });
      if (fieldCount === 0 && !this.options.submitFormIfAllUnchanged) {
        return setTimeout(function() {
          _this.enableForm();
          return _this.ajaxSuccess();
        }, 1);
      } else {
        return $.ajax({
          url: this.form.fwData("originalAction"),
          method: this.options.ajaxMethod,
          data: fields,
          type: "text",
          error: function(request) {
            return _this.callObservers("error", request.response);
          },
          success: function(request) {
            _this.enableForm();
            if (!_this.options.responseCheck(request.response)) {
              return _this.callObservers("error", request.response);
            } else {
              _this.callObservers("success", request.response);
              return _this.ajaxSuccess();
            }
          },
          complete: function(request) {
            _this.form.removeClass("submitting");
            return _this.callObservers("complete", request.response);
          }
        });
      }
    };

    Watcher.prototype.ajaxSuccess = function() {
      var element, elements, i, isEmpty, _i, _len, _ref, _results;
      _ref = this.allElements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elements = _ref[_i];
        Formwatcher.unsetChanged(elements, this);
        if (this.options.resetFormAfterSubmit) {
          Formwatcher.restoreInitialValue(elements);
        } else {
          Formwatcher.storeInitialValue(elements);
        }
        isEmpty = elements.input.val() === null || !elements.input.val();
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (i in elements) {
            element = elements[i];
            if (isEmpty) {
              _results1.push(element.addClass("empty"));
            } else {
              _results1.push(element.removeClass("empty"));
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Watcher;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.Formwatcher = Formwatcher;
    window.Watcher = Watcher;
  }

  $.domReady(function() {
    return Formwatcher.scanDocument();
  });

}).call(this);
