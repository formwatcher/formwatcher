// Generated by CoffeeScript 1.3.3
(function() {
  var Formwatcher, bean, bonzo, domready, qwery, reqwest,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  bonzo = require("bonzo");

  qwery = require("qwery");

  domready = require("domready");

  bean = require("bean");

  reqwest = require("reqwest");

  bonzo.aug({
    fwData: function(name, value) {
      var formwatcherAttributes;
      if (this.data("_formwatcher") == null) {
        this.data("_formwatcher", {});
      }
      if (name == null) {
        return this;
      }
      formwatcherAttributes = this.data("_formwatcher");
      if (value != null) {
        formwatcherAttributes[name] = value;
        this.data("_formwatcher", formwatcherAttributes);
        return this;
      } else {
        return formwatcherAttributes[name];
      }
    }
  });

  Formwatcher = {
    version: "0.0.3-dev",
    debugging: false,
    debug: function() {
      if (this.debugging && ((typeof console !== "undefined" && console !== null ? console.debug : void 0) != null)) {
        return console.debug.apply(console, arguments);
      }
    },
    getErrorsElement: function(elements, createIfNotFound) {
      var errors, input;
      input = bonzo(elements.input);
      if (input.attr("name")) {
        errors = qwery("#" + (input.attr('name')) + "-errors");
      }
      if (!((errors != null ? errors.length : void 0) || !input.attr("id"))) {
        errors = qwery("#" + (input.attr('id')) + "-errors");
      }
      if (!errors || !errors.length) {
        errors = bonzo.create("<small />")[0];
        if (input.attr("name")) {
          bonzo(errors).attr("id", input.attr("name") + "-errors");
        }
        bonzo(errors).insertAfter(input);
      }
      bonzo(errors).hide().addClass("errors").addClass("fw-errors");
      return errors;
    },
    deepExtend: function() {
      var extenders, key, object, other, val, _i, _len;
      object = arguments[0], extenders = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (object == null) {
        return {};
      }
      for (_i = 0, _len = extenders.length; _i < _len; _i++) {
        other = extenders[_i];
        for (key in other) {
          if (!__hasProp.call(other, key)) continue;
          val = other[key];
          if (!((object[key] != null) && typeof val === "object")) {
            object[key] = val;
          } else {
            object[key] = this.deepExtend(object[key], val);
          }
        }
      }
      return object;
    },
    getLabel: function(elements, automatchLabel) {
      var $input, label, parent;
      $input = bonzo(elements.input);
      if ($input.attr("id")) {
        label = bonzo(bonzo.create("<label for=\"" + ($input.attr("id")) + "\"></label>")[0]);
        if (!label.length) {
          label = void 0;
        }
      }
      if (!label && automatchLabel) {
        parent = $input.parent();
        if (parent.nodeName === "LABEL") {
          label = qwery("span", parent)[0];
        } else {
          label = $input.previous()[0];
          if (label && (label.nodeName !== "LABEL" || (bonzo(label).attr("for") != null))) {
            label = void 0;
          }
        }
      }
      return label;
    },
    changed: function(elements, watcher) {
      var $input;
      $input = bonzo(elements.input);
      if (!$input.fwData("forceValidationOnChange") && ($input.attr("type") === "checkbox" && $input.fwData("previouslyChecked") === !!$input[0].checked) || ($input.fwData("previousValue") === $input.val())) {
        return;
      }
      $input.fwData("forceValidationOnChange", false);
      this.setPreviousValueToCurrentValue(elements);
      if (($input.attr("type") === "checkbox") && ($input.fwData("initialyChecked") !== !!$input[0].checked) || ($input.attr("type") !== "checkbox") && ($input.fwData("initialValue") !== $input.val())) {
        Formwatcher.setChanged(elements, watcher);
      } else {
        Formwatcher.unsetChanged(elements, watcher);
      }
      if (watcher.options.validate) {
        return watcher.validateElements(elements);
      }
    },
    setChanged: function(elements, watcher) {
      var $input, element, i;
      $input = bonzo(elements.input);
      if ($input.fwData("changed")) {
        return;
      }
      for (i in elements) {
        if (!__hasProp.call(elements, i)) continue;
        element = elements[i];
        bonzo(element).addClass("changed");
      }
      $input.fwData("changed", true);
      if (!watcher.options.submitUnchanged) {
        Formwatcher.restoreName(elements);
      }
      if (watcher.options.submitOnChange && watcher.options.ajax) {
        return watcher.submitForm();
      }
    },
    unsetChanged: function(elements, watcher) {
      var $input, element, i;
      $input = bonzo(elements.input);
      if (!$input.fwData("changed")) {
        return;
      }
      for (i in elements) {
        if (!__hasProp.call(elements, i)) continue;
        element = elements[i];
        bonzo(element).removeClass("changed");
      }
      $input.fwData("changed", false);
      if (!watcher.options.submitUnchanged) {
        return Formwatcher.removeName(elements);
      }
    },
    storeInitialValue: function(elements) {
      var $input;
      $input = bonzo(elements.input);
      if ($input.attr("type") === "checkbox") {
        $input.fwData("initialyChecked", !!$input[0].checked);
      } else {
        $input.fwData("initialValue", $input.val());
      }
      return this.setPreviousValueToInitialValue(elements);
    },
    restoreInitialValue: function(elements) {
      var $input;
      $input = bonzo(elements.input);
      if ($input.attr("type") === "checkbox") {
        $input.attr("checked", $input.fwData("initialyChecked"));
      } else {
        $input.val($input.fwData("initialValue"));
      }
      return this.setPreviousValueToInitialValue(elements);
    },
    setPreviousValueToInitialValue: function(elements) {
      var $input;
      $input = bonzo(elements.input);
      if ($input.attr("type") === "checkbox") {
        return $input.fwData("previouslyChecked", $input.fwData("initialyChecked"));
      } else {
        return $input.fwData("previousValue", $input.fwData("initialValue"));
      }
    },
    setPreviousValueToCurrentValue: function(elements) {
      var $input;
      $input = bonzo(elements.input);
      if ($input.attr("type") === "checkbox") {
        return $input.fwData("previouslyChecked", !!$input[0].checked);
      } else {
        return $input.fwData("previousValue", $input.val());
      }
    },
    removeName: function(elements) {
      var $input;
      $input = bonzo(elements.input);
      if ($input.attr("type") === "checkbox") {
        return;
      }
      if (!$input.fwData("name")) {
        $input.fwData("name", $input.attr("name") || "");
      }
      return $input.attr("name", "");
    },
    restoreName: function(elements) {
      var $input;
      $input = bonzo(elements.input);
      if ($input.attr("type") === "checkbox") {
        return;
      }
      return $input.attr("name", $input.fwData("name"));
    },
    decorators: [],
    decorate: function(watcher, input) {
      var dec, decorator, _i, _len, _ref;
      decorator = null;
      _ref = watcher.decorators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dec = _ref[_i];
        if ((!(watcher.options[dec.name] != null) || watcher.options[dec.name] !== false) && dec.accepts(input)) {
          decorator = dec;
          break;
        }
      }
      if (decorator) {
        Formwatcher.debug("Decorator '" + decorator.name + "' found for input field '" + (bonzo(input).attr("name")) + "'.");
        return decorator.decorate(input);
      } else {
        return {
          input: input
        };
      }
    },
    validators: [],
    currentWatcherId: 0,
    watchers: [],
    add: function(watcher) {
      return this.watchers[watcher.id] = watcher;
    },
    get: function(id) {
      return this.watchers[id];
    },
    getAll: function() {
      return this.watchers;
    },
    discover: function() {
      var handleForm,
        _this = this;
      handleForm = function(form) {
        var domOptions, formId, options;
        form = bonzo(form);
        if (form.fwData("watcher")) {
          return;
        }
        formId = form.attr("id");
        options = (formId != null) && (Formwatcher.options[formId] != null) ? Formwatcher.options[formId] : {};
        domOptions = form.data("fw");
        if (domOptions) {
          options = _this.deepExtend(options, JSON.parse(domOptions));
        }
        return new _this.Watcher(form, options);
      };
      return domready(function() {
        var formId, _results;
        bonzo(qwery("form[data-fw]")).each(function(form) {
          return handleForm(form);
        });
        _results = [];
        for (formId in Formwatcher.options) {
          _results.push(handleForm(qwery("#" + formId)));
        }
        return _results;
      });
    },
    watch: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return domready(function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t = typeof result;
          return t == "object" || t == "function" ? result || child : child;
        })(this.Watcher, args, function(){});
      });
    }
  };

  Formwatcher.defaultOptions = {
    ajax: false,
    ajaxMethod: null,
    validate: true,
    submitOnChange: false,
    submitUnchanged: true,
    submitFormIfAllUnchanged: false,
    resetFormAfterSubmit: false,
    automatchLabel: true,
    responseCheck: function(data) {
      return !data;
    },
    onSubmit: function() {},
    onSuccess: function(data) {},
    onError: function(data) {
      return alert(data);
    },
    onComplete: function(data) {}
  };

  Formwatcher.options = {};

  module.exports = Formwatcher;

}).call(this);
